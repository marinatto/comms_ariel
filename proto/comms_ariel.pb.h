// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comms_ariel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_comms_5fariel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_comms_5fariel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_comms_5fariel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_comms_5fariel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comms_5fariel_2eproto;
namespace comms_ariel {
class CommonTelemetry;
class CommonTelemetryDefaultTypeInternal;
extern CommonTelemetryDefaultTypeInternal _CommonTelemetry_default_instance_;
class DroneTelemetry;
class DroneTelemetryDefaultTypeInternal;
extern DroneTelemetryDefaultTypeInternal _DroneTelemetry_default_instance_;
class DroneToUSVMessage;
class DroneToUSVMessageDefaultTypeInternal;
extern DroneToUSVMessageDefaultTypeInternal _DroneToUSVMessage_default_instance_;
class Mission;
class MissionDefaultTypeInternal;
extern MissionDefaultTypeInternal _Mission_default_instance_;
class USVTelemetry;
class USVTelemetryDefaultTypeInternal;
extern USVTelemetryDefaultTypeInternal _USVTelemetry_default_instance_;
class USVToDroneMessage;
class USVToDroneMessageDefaultTypeInternal;
extern USVToDroneMessageDefaultTypeInternal _USVToDroneMessage_default_instance_;
}  // namespace comms_ariel
PROTOBUF_NAMESPACE_OPEN
template<> ::comms_ariel::CommonTelemetry* Arena::CreateMaybeMessage<::comms_ariel::CommonTelemetry>(Arena*);
template<> ::comms_ariel::DroneTelemetry* Arena::CreateMaybeMessage<::comms_ariel::DroneTelemetry>(Arena*);
template<> ::comms_ariel::DroneToUSVMessage* Arena::CreateMaybeMessage<::comms_ariel::DroneToUSVMessage>(Arena*);
template<> ::comms_ariel::Mission* Arena::CreateMaybeMessage<::comms_ariel::Mission>(Arena*);
template<> ::comms_ariel::USVTelemetry* Arena::CreateMaybeMessage<::comms_ariel::USVTelemetry>(Arena*);
template<> ::comms_ariel::USVToDroneMessage* Arena::CreateMaybeMessage<::comms_ariel::USVToDroneMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace comms_ariel {

enum USVTelemetry_States : int {
  USVTelemetry_States_TRANSIT = 0,
  USVTelemetry_States_TAKEOFF_OK = 1,
  USVTelemetry_States_LANDING_OK = 2,
  USVTelemetry_States_USVTelemetry_States_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  USVTelemetry_States_USVTelemetry_States_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool USVTelemetry_States_IsValid(int value);
constexpr USVTelemetry_States USVTelemetry_States_States_MIN = USVTelemetry_States_TRANSIT;
constexpr USVTelemetry_States USVTelemetry_States_States_MAX = USVTelemetry_States_LANDING_OK;
constexpr int USVTelemetry_States_States_ARRAYSIZE = USVTelemetry_States_States_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* USVTelemetry_States_descriptor();
template<typename T>
inline const std::string& USVTelemetry_States_Name(T enum_t_value) {
  static_assert(::std::is_same<T, USVTelemetry_States>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function USVTelemetry_States_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    USVTelemetry_States_descriptor(), enum_t_value);
}
inline bool USVTelemetry_States_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, USVTelemetry_States* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<USVTelemetry_States>(
    USVTelemetry_States_descriptor(), name, value);
}
enum DroneTelemetry_States : int {
  DroneTelemetry_States_WAITING_LANDING = 0,
  DroneTelemetry_States_DroneTelemetry_States_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DroneTelemetry_States_DroneTelemetry_States_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DroneTelemetry_States_IsValid(int value);
constexpr DroneTelemetry_States DroneTelemetry_States_States_MIN = DroneTelemetry_States_WAITING_LANDING;
constexpr DroneTelemetry_States DroneTelemetry_States_States_MAX = DroneTelemetry_States_WAITING_LANDING;
constexpr int DroneTelemetry_States_States_ARRAYSIZE = DroneTelemetry_States_States_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DroneTelemetry_States_descriptor();
template<typename T>
inline const std::string& DroneTelemetry_States_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DroneTelemetry_States>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DroneTelemetry_States_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DroneTelemetry_States_descriptor(), enum_t_value);
}
inline bool DroneTelemetry_States_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DroneTelemetry_States* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DroneTelemetry_States>(
    DroneTelemetry_States_descriptor(), name, value);
}
// ===================================================================

class CommonTelemetry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comms_ariel.CommonTelemetry) */ {
 public:
  inline CommonTelemetry() : CommonTelemetry(nullptr) {}
  virtual ~CommonTelemetry();

  CommonTelemetry(const CommonTelemetry& from);
  CommonTelemetry(CommonTelemetry&& from) noexcept
    : CommonTelemetry() {
    *this = ::std::move(from);
  }

  inline CommonTelemetry& operator=(const CommonTelemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonTelemetry& operator=(CommonTelemetry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommonTelemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonTelemetry* internal_default_instance() {
    return reinterpret_cast<const CommonTelemetry*>(
               &_CommonTelemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommonTelemetry& a, CommonTelemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonTelemetry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonTelemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonTelemetry* New() const final {
    return CreateMaybeMessage<CommonTelemetry>(nullptr);
  }

  CommonTelemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonTelemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonTelemetry& from);
  void MergeFrom(const CommonTelemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonTelemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comms_ariel.CommonTelemetry";
  }
  protected:
  explicit CommonTelemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comms_5fariel_2eproto);
    return ::descriptor_table_comms_5fariel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeUsFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // uint64 time_us = 1;
  void clear_time_us();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_us() const;
  void set_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time_us() const;
  void _internal_set_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:comms_ariel.CommonTelemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_us_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comms_5fariel_2eproto;
};
// -------------------------------------------------------------------

class USVTelemetry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comms_ariel.USVTelemetry) */ {
 public:
  inline USVTelemetry() : USVTelemetry(nullptr) {}
  virtual ~USVTelemetry();

  USVTelemetry(const USVTelemetry& from);
  USVTelemetry(USVTelemetry&& from) noexcept
    : USVTelemetry() {
    *this = ::std::move(from);
  }

  inline USVTelemetry& operator=(const USVTelemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline USVTelemetry& operator=(USVTelemetry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USVTelemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USVTelemetry* internal_default_instance() {
    return reinterpret_cast<const USVTelemetry*>(
               &_USVTelemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(USVTelemetry& a, USVTelemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(USVTelemetry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USVTelemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USVTelemetry* New() const final {
    return CreateMaybeMessage<USVTelemetry>(nullptr);
  }

  USVTelemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USVTelemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USVTelemetry& from);
  void MergeFrom(const USVTelemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USVTelemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comms_ariel.USVTelemetry";
  }
  protected:
  explicit USVTelemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comms_5fariel_2eproto);
    return ::descriptor_table_comms_5fariel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef USVTelemetry_States States;
  static constexpr States TRANSIT =
    USVTelemetry_States_TRANSIT;
  static constexpr States TAKEOFF_OK =
    USVTelemetry_States_TAKEOFF_OK;
  static constexpr States LANDING_OK =
    USVTelemetry_States_LANDING_OK;
  static inline bool States_IsValid(int value) {
    return USVTelemetry_States_IsValid(value);
  }
  static constexpr States States_MIN =
    USVTelemetry_States_States_MIN;
  static constexpr States States_MAX =
    USVTelemetry_States_States_MAX;
  static constexpr int States_ARRAYSIZE =
    USVTelemetry_States_States_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  States_descriptor() {
    return USVTelemetry_States_descriptor();
  }
  template<typename T>
  static inline const std::string& States_Name(T enum_t_value) {
    static_assert(::std::is_same<T, States>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function States_Name.");
    return USVTelemetry_States_Name(enum_t_value);
  }
  static inline bool States_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      States* value) {
    return USVTelemetry_States_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 4,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kVelocityNFieldNumber = 5,
    kVelocityWFieldNumber = 6,
    kStateFieldNumber = 8,
  };
  // repeated double orientation = 4;
  int orientation_size() const;
  private:
  int _internal_orientation_size() const;
  public:
  void clear_orientation();
  private:
  double _internal_orientation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_orientation() const;
  void _internal_add_orientation(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_orientation();
  public:
  double orientation(int index) const;
  void set_orientation(int index, double value);
  void add_orientation(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      orientation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_orientation();

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // float velocity_n = 5;
  void clear_velocity_n();
  float velocity_n() const;
  void set_velocity_n(float value);
  private:
  float _internal_velocity_n() const;
  void _internal_set_velocity_n(float value);
  public:

  // float velocity_w = 6;
  void clear_velocity_w();
  float velocity_w() const;
  void set_velocity_w(float value);
  private:
  float _internal_velocity_w() const;
  void _internal_set_velocity_w(float value);
  public:

  // .comms_ariel.USVTelemetry.States state = 8;
  void clear_state();
  ::comms_ariel::USVTelemetry_States state() const;
  void set_state(::comms_ariel::USVTelemetry_States value);
  private:
  ::comms_ariel::USVTelemetry_States _internal_state() const;
  void _internal_set_state(::comms_ariel::USVTelemetry_States value);
  public:

  // @@protoc_insertion_point(class_scope:comms_ariel.USVTelemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > orientation_;
  mutable std::atomic<int> _orientation_cached_byte_size_;
  double latitude_;
  double longitude_;
  float velocity_n_;
  float velocity_w_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comms_5fariel_2eproto;
};
// -------------------------------------------------------------------

class DroneTelemetry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comms_ariel.DroneTelemetry) */ {
 public:
  inline DroneTelemetry() : DroneTelemetry(nullptr) {}
  virtual ~DroneTelemetry();

  DroneTelemetry(const DroneTelemetry& from);
  DroneTelemetry(DroneTelemetry&& from) noexcept
    : DroneTelemetry() {
    *this = ::std::move(from);
  }

  inline DroneTelemetry& operator=(const DroneTelemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneTelemetry& operator=(DroneTelemetry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DroneTelemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DroneTelemetry* internal_default_instance() {
    return reinterpret_cast<const DroneTelemetry*>(
               &_DroneTelemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DroneTelemetry& a, DroneTelemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneTelemetry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneTelemetry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneTelemetry* New() const final {
    return CreateMaybeMessage<DroneTelemetry>(nullptr);
  }

  DroneTelemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneTelemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DroneTelemetry& from);
  void MergeFrom(const DroneTelemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneTelemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comms_ariel.DroneTelemetry";
  }
  protected:
  explicit DroneTelemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comms_5fariel_2eproto);
    return ::descriptor_table_comms_5fariel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DroneTelemetry_States States;
  static constexpr States WAITING_LANDING =
    DroneTelemetry_States_WAITING_LANDING;
  static inline bool States_IsValid(int value) {
    return DroneTelemetry_States_IsValid(value);
  }
  static constexpr States States_MIN =
    DroneTelemetry_States_States_MIN;
  static constexpr States States_MAX =
    DroneTelemetry_States_States_MAX;
  static constexpr int States_ARRAYSIZE =
    DroneTelemetry_States_States_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  States_descriptor() {
    return DroneTelemetry_States_descriptor();
  }
  template<typename T>
  static inline const std::string& States_Name(T enum_t_value) {
    static_assert(::std::is_same<T, States>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function States_Name.");
    return DroneTelemetry_States_Name(enum_t_value);
  }
  static inline bool States_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      States* value) {
    return DroneTelemetry_States_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLoadedMissionIdFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kAltitudeFieldNumber = 4,
    kStateFieldNumber = 8,
  };
  // uint64 loaded_mission_id = 1;
  void clear_loaded_mission_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 loaded_mission_id() const;
  void set_loaded_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_loaded_mission_id() const;
  void _internal_set_loaded_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // float altitude = 4;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);
  private:
  float _internal_altitude() const;
  void _internal_set_altitude(float value);
  public:

  // .comms_ariel.DroneTelemetry.States state = 8;
  void clear_state();
  ::comms_ariel::DroneTelemetry_States state() const;
  void set_state(::comms_ariel::DroneTelemetry_States value);
  private:
  ::comms_ariel::DroneTelemetry_States _internal_state() const;
  void _internal_set_state(::comms_ariel::DroneTelemetry_States value);
  public:

  // @@protoc_insertion_point(class_scope:comms_ariel.DroneTelemetry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 loaded_mission_id_;
  double latitude_;
  double longitude_;
  float altitude_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comms_5fariel_2eproto;
};
// -------------------------------------------------------------------

class Mission PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comms_ariel.Mission) */ {
 public:
  inline Mission() : Mission(nullptr) {}
  virtual ~Mission();

  Mission(const Mission& from);
  Mission(Mission&& from) noexcept
    : Mission() {
    *this = ::std::move(from);
  }

  inline Mission& operator=(const Mission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mission& operator=(Mission&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mission* internal_default_instance() {
    return reinterpret_cast<const Mission*>(
               &_Mission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Mission& a, Mission& b) {
    a.Swap(&b);
  }
  inline void Swap(Mission* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mission* New() const final {
    return CreateMaybeMessage<Mission>(nullptr);
  }

  Mission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mission& from);
  void MergeFrom(const Mission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comms_ariel.Mission";
  }
  protected:
  explicit Mission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comms_5fariel_2eproto);
    return ::descriptor_table_comms_5fariel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 2,
    kUsvWaypointsFieldNumber = 4,
    kMissionIdFieldNumber = 1,
    kUsvReferenceTimeFieldNumber = 3,
  };
  // repeated double waypoints = 2;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  private:
  double _internal_waypoints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_waypoints() const;
  void _internal_add_waypoints(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_waypoints();
  public:
  double waypoints(int index) const;
  void set_waypoints(int index, double value);
  void add_waypoints(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      waypoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_waypoints();

  // repeated double usv_waypoints = 4;
  int usv_waypoints_size() const;
  private:
  int _internal_usv_waypoints_size() const;
  public:
  void clear_usv_waypoints();
  private:
  double _internal_usv_waypoints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_usv_waypoints() const;
  void _internal_add_usv_waypoints(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_usv_waypoints();
  public:
  double usv_waypoints(int index) const;
  void set_usv_waypoints(int index, double value);
  void add_usv_waypoints(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      usv_waypoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_usv_waypoints();

  // uint64 mission_id = 1;
  void clear_mission_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 mission_id() const;
  void set_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mission_id() const;
  void _internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 usv_reference_time = 3;
  void clear_usv_reference_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 usv_reference_time() const;
  void set_usv_reference_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_usv_reference_time() const;
  void _internal_set_usv_reference_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:comms_ariel.Mission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > waypoints_;
  mutable std::atomic<int> _waypoints_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > usv_waypoints_;
  mutable std::atomic<int> _usv_waypoints_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mission_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 usv_reference_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comms_5fariel_2eproto;
};
// -------------------------------------------------------------------

class USVToDroneMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comms_ariel.USVToDroneMessage) */ {
 public:
  inline USVToDroneMessage() : USVToDroneMessage(nullptr) {}
  virtual ~USVToDroneMessage();

  USVToDroneMessage(const USVToDroneMessage& from);
  USVToDroneMessage(USVToDroneMessage&& from) noexcept
    : USVToDroneMessage() {
    *this = ::std::move(from);
  }

  inline USVToDroneMessage& operator=(const USVToDroneMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline USVToDroneMessage& operator=(USVToDroneMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const USVToDroneMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const USVToDroneMessage* internal_default_instance() {
    return reinterpret_cast<const USVToDroneMessage*>(
               &_USVToDroneMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(USVToDroneMessage& a, USVToDroneMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(USVToDroneMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(USVToDroneMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline USVToDroneMessage* New() const final {
    return CreateMaybeMessage<USVToDroneMessage>(nullptr);
  }

  USVToDroneMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<USVToDroneMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const USVToDroneMessage& from);
  void MergeFrom(const USVToDroneMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(USVToDroneMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comms_ariel.USVToDroneMessage";
  }
  protected:
  explicit USVToDroneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comms_5fariel_2eproto);
    return ::descriptor_table_comms_5fariel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kTelemetryFieldNumber = 2,
    kMissionFieldNumber = 3,
  };
  // .comms_ariel.CommonTelemetry common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::comms_ariel::CommonTelemetry& common() const;
  ::comms_ariel::CommonTelemetry* release_common();
  ::comms_ariel::CommonTelemetry* mutable_common();
  void set_allocated_common(::comms_ariel::CommonTelemetry* common);
  private:
  const ::comms_ariel::CommonTelemetry& _internal_common() const;
  ::comms_ariel::CommonTelemetry* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::comms_ariel::CommonTelemetry* common);
  ::comms_ariel::CommonTelemetry* unsafe_arena_release_common();

  // .comms_ariel.USVTelemetry telemetry = 2;
  bool has_telemetry() const;
  private:
  bool _internal_has_telemetry() const;
  public:
  void clear_telemetry();
  const ::comms_ariel::USVTelemetry& telemetry() const;
  ::comms_ariel::USVTelemetry* release_telemetry();
  ::comms_ariel::USVTelemetry* mutable_telemetry();
  void set_allocated_telemetry(::comms_ariel::USVTelemetry* telemetry);
  private:
  const ::comms_ariel::USVTelemetry& _internal_telemetry() const;
  ::comms_ariel::USVTelemetry* _internal_mutable_telemetry();
  public:
  void unsafe_arena_set_allocated_telemetry(
      ::comms_ariel::USVTelemetry* telemetry);
  ::comms_ariel::USVTelemetry* unsafe_arena_release_telemetry();

  // .comms_ariel.Mission mission = 3;
  bool has_mission() const;
  private:
  bool _internal_has_mission() const;
  public:
  void clear_mission();
  const ::comms_ariel::Mission& mission() const;
  ::comms_ariel::Mission* release_mission();
  ::comms_ariel::Mission* mutable_mission();
  void set_allocated_mission(::comms_ariel::Mission* mission);
  private:
  const ::comms_ariel::Mission& _internal_mission() const;
  ::comms_ariel::Mission* _internal_mutable_mission();
  public:
  void unsafe_arena_set_allocated_mission(
      ::comms_ariel::Mission* mission);
  ::comms_ariel::Mission* unsafe_arena_release_mission();

  // @@protoc_insertion_point(class_scope:comms_ariel.USVToDroneMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::comms_ariel::CommonTelemetry* common_;
  ::comms_ariel::USVTelemetry* telemetry_;
  ::comms_ariel::Mission* mission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comms_5fariel_2eproto;
};
// -------------------------------------------------------------------

class DroneToUSVMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:comms_ariel.DroneToUSVMessage) */ {
 public:
  inline DroneToUSVMessage() : DroneToUSVMessage(nullptr) {}
  virtual ~DroneToUSVMessage();

  DroneToUSVMessage(const DroneToUSVMessage& from);
  DroneToUSVMessage(DroneToUSVMessage&& from) noexcept
    : DroneToUSVMessage() {
    *this = ::std::move(from);
  }

  inline DroneToUSVMessage& operator=(const DroneToUSVMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DroneToUSVMessage& operator=(DroneToUSVMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DroneToUSVMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DroneToUSVMessage* internal_default_instance() {
    return reinterpret_cast<const DroneToUSVMessage*>(
               &_DroneToUSVMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DroneToUSVMessage& a, DroneToUSVMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DroneToUSVMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DroneToUSVMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DroneToUSVMessage* New() const final {
    return CreateMaybeMessage<DroneToUSVMessage>(nullptr);
  }

  DroneToUSVMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DroneToUSVMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DroneToUSVMessage& from);
  void MergeFrom(const DroneToUSVMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DroneToUSVMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "comms_ariel.DroneToUSVMessage";
  }
  protected:
  explicit DroneToUSVMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_comms_5fariel_2eproto);
    return ::descriptor_table_comms_5fariel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kTelemetryFieldNumber = 2,
  };
  // .comms_ariel.CommonTelemetry common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::comms_ariel::CommonTelemetry& common() const;
  ::comms_ariel::CommonTelemetry* release_common();
  ::comms_ariel::CommonTelemetry* mutable_common();
  void set_allocated_common(::comms_ariel::CommonTelemetry* common);
  private:
  const ::comms_ariel::CommonTelemetry& _internal_common() const;
  ::comms_ariel::CommonTelemetry* _internal_mutable_common();
  public:
  void unsafe_arena_set_allocated_common(
      ::comms_ariel::CommonTelemetry* common);
  ::comms_ariel::CommonTelemetry* unsafe_arena_release_common();

  // .comms_ariel.DroneTelemetry telemetry = 2;
  bool has_telemetry() const;
  private:
  bool _internal_has_telemetry() const;
  public:
  void clear_telemetry();
  const ::comms_ariel::DroneTelemetry& telemetry() const;
  ::comms_ariel::DroneTelemetry* release_telemetry();
  ::comms_ariel::DroneTelemetry* mutable_telemetry();
  void set_allocated_telemetry(::comms_ariel::DroneTelemetry* telemetry);
  private:
  const ::comms_ariel::DroneTelemetry& _internal_telemetry() const;
  ::comms_ariel::DroneTelemetry* _internal_mutable_telemetry();
  public:
  void unsafe_arena_set_allocated_telemetry(
      ::comms_ariel::DroneTelemetry* telemetry);
  ::comms_ariel::DroneTelemetry* unsafe_arena_release_telemetry();

  // @@protoc_insertion_point(class_scope:comms_ariel.DroneToUSVMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::comms_ariel::CommonTelemetry* common_;
  ::comms_ariel::DroneTelemetry* telemetry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_comms_5fariel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonTelemetry

// uint64 time_us = 1;
inline void CommonTelemetry::clear_time_us() {
  time_us_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommonTelemetry::_internal_time_us() const {
  return time_us_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CommonTelemetry::time_us() const {
  // @@protoc_insertion_point(field_get:comms_ariel.CommonTelemetry.time_us)
  return _internal_time_us();
}
inline void CommonTelemetry::_internal_set_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_us_ = value;
}
inline void CommonTelemetry::set_time_us(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time_us(value);
  // @@protoc_insertion_point(field_set:comms_ariel.CommonTelemetry.time_us)
}

// uint32 id = 2;
inline void CommonTelemetry::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonTelemetry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommonTelemetry::id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.CommonTelemetry.id)
  return _internal_id();
}
inline void CommonTelemetry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void CommonTelemetry::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:comms_ariel.CommonTelemetry.id)
}

// -------------------------------------------------------------------

// USVTelemetry

// double latitude = 2;
inline void USVTelemetry::clear_latitude() {
  latitude_ = 0;
}
inline double USVTelemetry::_internal_latitude() const {
  return latitude_;
}
inline double USVTelemetry::latitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.latitude)
  return _internal_latitude();
}
inline void USVTelemetry::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void USVTelemetry::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.latitude)
}

// double longitude = 3;
inline void USVTelemetry::clear_longitude() {
  longitude_ = 0;
}
inline double USVTelemetry::_internal_longitude() const {
  return longitude_;
}
inline double USVTelemetry::longitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.longitude)
  return _internal_longitude();
}
inline void USVTelemetry::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void USVTelemetry::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.longitude)
}

// repeated double orientation = 4;
inline int USVTelemetry::_internal_orientation_size() const {
  return orientation_.size();
}
inline int USVTelemetry::orientation_size() const {
  return _internal_orientation_size();
}
inline void USVTelemetry::clear_orientation() {
  orientation_.Clear();
}
inline double USVTelemetry::_internal_orientation(int index) const {
  return orientation_.Get(index);
}
inline double USVTelemetry::orientation(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.orientation)
  return _internal_orientation(index);
}
inline void USVTelemetry::set_orientation(int index, double value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.orientation)
}
inline void USVTelemetry::_internal_add_orientation(double value) {
  orientation_.Add(value);
}
inline void USVTelemetry::add_orientation(double value) {
  _internal_add_orientation(value);
  // @@protoc_insertion_point(field_add:comms_ariel.USVTelemetry.orientation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USVTelemetry::_internal_orientation() const {
  return orientation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
USVTelemetry::orientation() const {
  // @@protoc_insertion_point(field_list:comms_ariel.USVTelemetry.orientation)
  return _internal_orientation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USVTelemetry::_internal_mutable_orientation() {
  return &orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
USVTelemetry::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.USVTelemetry.orientation)
  return _internal_mutable_orientation();
}

// float velocity_n = 5;
inline void USVTelemetry::clear_velocity_n() {
  velocity_n_ = 0;
}
inline float USVTelemetry::_internal_velocity_n() const {
  return velocity_n_;
}
inline float USVTelemetry::velocity_n() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.velocity_n)
  return _internal_velocity_n();
}
inline void USVTelemetry::_internal_set_velocity_n(float value) {
  
  velocity_n_ = value;
}
inline void USVTelemetry::set_velocity_n(float value) {
  _internal_set_velocity_n(value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.velocity_n)
}

// float velocity_w = 6;
inline void USVTelemetry::clear_velocity_w() {
  velocity_w_ = 0;
}
inline float USVTelemetry::_internal_velocity_w() const {
  return velocity_w_;
}
inline float USVTelemetry::velocity_w() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.velocity_w)
  return _internal_velocity_w();
}
inline void USVTelemetry::_internal_set_velocity_w(float value) {
  
  velocity_w_ = value;
}
inline void USVTelemetry::set_velocity_w(float value) {
  _internal_set_velocity_w(value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.velocity_w)
}

// .comms_ariel.USVTelemetry.States state = 8;
inline void USVTelemetry::clear_state() {
  state_ = 0;
}
inline ::comms_ariel::USVTelemetry_States USVTelemetry::_internal_state() const {
  return static_cast< ::comms_ariel::USVTelemetry_States >(state_);
}
inline ::comms_ariel::USVTelemetry_States USVTelemetry::state() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVTelemetry.state)
  return _internal_state();
}
inline void USVTelemetry::_internal_set_state(::comms_ariel::USVTelemetry_States value) {
  
  state_ = value;
}
inline void USVTelemetry::set_state(::comms_ariel::USVTelemetry_States value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:comms_ariel.USVTelemetry.state)
}

// -------------------------------------------------------------------

// DroneTelemetry

// uint64 loaded_mission_id = 1;
inline void DroneTelemetry::clear_loaded_mission_id() {
  loaded_mission_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DroneTelemetry::_internal_loaded_mission_id() const {
  return loaded_mission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DroneTelemetry::loaded_mission_id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.loaded_mission_id)
  return _internal_loaded_mission_id();
}
inline void DroneTelemetry::_internal_set_loaded_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  loaded_mission_id_ = value;
}
inline void DroneTelemetry::set_loaded_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_loaded_mission_id(value);
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.loaded_mission_id)
}

// double latitude = 2;
inline void DroneTelemetry::clear_latitude() {
  latitude_ = 0;
}
inline double DroneTelemetry::_internal_latitude() const {
  return latitude_;
}
inline double DroneTelemetry::latitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.latitude)
  return _internal_latitude();
}
inline void DroneTelemetry::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void DroneTelemetry::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.latitude)
}

// double longitude = 3;
inline void DroneTelemetry::clear_longitude() {
  longitude_ = 0;
}
inline double DroneTelemetry::_internal_longitude() const {
  return longitude_;
}
inline double DroneTelemetry::longitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.longitude)
  return _internal_longitude();
}
inline void DroneTelemetry::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void DroneTelemetry::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.longitude)
}

// float altitude = 4;
inline void DroneTelemetry::clear_altitude() {
  altitude_ = 0;
}
inline float DroneTelemetry::_internal_altitude() const {
  return altitude_;
}
inline float DroneTelemetry::altitude() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.altitude)
  return _internal_altitude();
}
inline void DroneTelemetry::_internal_set_altitude(float value) {
  
  altitude_ = value;
}
inline void DroneTelemetry::set_altitude(float value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.altitude)
}

// .comms_ariel.DroneTelemetry.States state = 8;
inline void DroneTelemetry::clear_state() {
  state_ = 0;
}
inline ::comms_ariel::DroneTelemetry_States DroneTelemetry::_internal_state() const {
  return static_cast< ::comms_ariel::DroneTelemetry_States >(state_);
}
inline ::comms_ariel::DroneTelemetry_States DroneTelemetry::state() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneTelemetry.state)
  return _internal_state();
}
inline void DroneTelemetry::_internal_set_state(::comms_ariel::DroneTelemetry_States value) {
  
  state_ = value;
}
inline void DroneTelemetry::set_state(::comms_ariel::DroneTelemetry_States value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:comms_ariel.DroneTelemetry.state)
}

// -------------------------------------------------------------------

// Mission

// uint64 mission_id = 1;
inline void Mission::clear_mission_id() {
  mission_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mission::_internal_mission_id() const {
  return mission_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mission::mission_id() const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.mission_id)
  return _internal_mission_id();
}
inline void Mission::_internal_set_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mission_id_ = value;
}
inline void Mission::set_mission_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mission_id(value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.mission_id)
}

// repeated double waypoints = 2;
inline int Mission::_internal_waypoints_size() const {
  return waypoints_.size();
}
inline int Mission::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void Mission::clear_waypoints() {
  waypoints_.Clear();
}
inline double Mission::_internal_waypoints(int index) const {
  return waypoints_.Get(index);
}
inline double Mission::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.waypoints)
  return _internal_waypoints(index);
}
inline void Mission::set_waypoints(int index, double value) {
  waypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.waypoints)
}
inline void Mission::_internal_add_waypoints(double value) {
  waypoints_.Add(value);
}
inline void Mission::add_waypoints(double value) {
  _internal_add_waypoints(value);
  // @@protoc_insertion_point(field_add:comms_ariel.Mission.waypoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Mission::_internal_waypoints() const {
  return waypoints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Mission::waypoints() const {
  // @@protoc_insertion_point(field_list:comms_ariel.Mission.waypoints)
  return _internal_waypoints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Mission::_internal_mutable_waypoints() {
  return &waypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Mission::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.Mission.waypoints)
  return _internal_mutable_waypoints();
}

// uint64 usv_reference_time = 3;
inline void Mission::clear_usv_reference_time() {
  usv_reference_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mission::_internal_usv_reference_time() const {
  return usv_reference_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mission::usv_reference_time() const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.usv_reference_time)
  return _internal_usv_reference_time();
}
inline void Mission::_internal_set_usv_reference_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  usv_reference_time_ = value;
}
inline void Mission::set_usv_reference_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_usv_reference_time(value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.usv_reference_time)
}

// repeated double usv_waypoints = 4;
inline int Mission::_internal_usv_waypoints_size() const {
  return usv_waypoints_.size();
}
inline int Mission::usv_waypoints_size() const {
  return _internal_usv_waypoints_size();
}
inline void Mission::clear_usv_waypoints() {
  usv_waypoints_.Clear();
}
inline double Mission::_internal_usv_waypoints(int index) const {
  return usv_waypoints_.Get(index);
}
inline double Mission::usv_waypoints(int index) const {
  // @@protoc_insertion_point(field_get:comms_ariel.Mission.usv_waypoints)
  return _internal_usv_waypoints(index);
}
inline void Mission::set_usv_waypoints(int index, double value) {
  usv_waypoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:comms_ariel.Mission.usv_waypoints)
}
inline void Mission::_internal_add_usv_waypoints(double value) {
  usv_waypoints_.Add(value);
}
inline void Mission::add_usv_waypoints(double value) {
  _internal_add_usv_waypoints(value);
  // @@protoc_insertion_point(field_add:comms_ariel.Mission.usv_waypoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Mission::_internal_usv_waypoints() const {
  return usv_waypoints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Mission::usv_waypoints() const {
  // @@protoc_insertion_point(field_list:comms_ariel.Mission.usv_waypoints)
  return _internal_usv_waypoints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Mission::_internal_mutable_usv_waypoints() {
  return &usv_waypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Mission::mutable_usv_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:comms_ariel.Mission.usv_waypoints)
  return _internal_mutable_usv_waypoints();
}

// -------------------------------------------------------------------

// USVToDroneMessage

// .comms_ariel.CommonTelemetry common = 1;
inline bool USVToDroneMessage::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool USVToDroneMessage::has_common() const {
  return _internal_has_common();
}
inline void USVToDroneMessage::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::comms_ariel::CommonTelemetry& USVToDroneMessage::_internal_common() const {
  const ::comms_ariel::CommonTelemetry* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::comms_ariel::CommonTelemetry*>(
      &::comms_ariel::_CommonTelemetry_default_instance_);
}
inline const ::comms_ariel::CommonTelemetry& USVToDroneMessage::common() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.common)
  return _internal_common();
}
inline void USVToDroneMessage::unsafe_arena_set_allocated_common(
    ::comms_ariel::CommonTelemetry* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comms_ariel.USVToDroneMessage.common)
}
inline ::comms_ariel::CommonTelemetry* USVToDroneMessage::release_common() {
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::comms_ariel::CommonTelemetry* USVToDroneMessage::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.common)
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::comms_ariel::CommonTelemetry* USVToDroneMessage::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::comms_ariel::CommonTelemetry>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::comms_ariel::CommonTelemetry* USVToDroneMessage::mutable_common() {
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.common)
  return _internal_mutable_common();
}
inline void USVToDroneMessage::set_allocated_common(::comms_ariel::CommonTelemetry* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.common)
}

// .comms_ariel.USVTelemetry telemetry = 2;
inline bool USVToDroneMessage::_internal_has_telemetry() const {
  return this != internal_default_instance() && telemetry_ != nullptr;
}
inline bool USVToDroneMessage::has_telemetry() const {
  return _internal_has_telemetry();
}
inline void USVToDroneMessage::clear_telemetry() {
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
}
inline const ::comms_ariel::USVTelemetry& USVToDroneMessage::_internal_telemetry() const {
  const ::comms_ariel::USVTelemetry* p = telemetry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::comms_ariel::USVTelemetry*>(
      &::comms_ariel::_USVTelemetry_default_instance_);
}
inline const ::comms_ariel::USVTelemetry& USVToDroneMessage::telemetry() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.telemetry)
  return _internal_telemetry();
}
inline void USVToDroneMessage::unsafe_arena_set_allocated_telemetry(
    ::comms_ariel::USVTelemetry* telemetry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_);
  }
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comms_ariel.USVToDroneMessage.telemetry)
}
inline ::comms_ariel::USVTelemetry* USVToDroneMessage::release_telemetry() {
  
  ::comms_ariel::USVTelemetry* temp = telemetry_;
  telemetry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::comms_ariel::USVTelemetry* USVToDroneMessage::unsafe_arena_release_telemetry() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.telemetry)
  
  ::comms_ariel::USVTelemetry* temp = telemetry_;
  telemetry_ = nullptr;
  return temp;
}
inline ::comms_ariel::USVTelemetry* USVToDroneMessage::_internal_mutable_telemetry() {
  
  if (telemetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::comms_ariel::USVTelemetry>(GetArena());
    telemetry_ = p;
  }
  return telemetry_;
}
inline ::comms_ariel::USVTelemetry* USVToDroneMessage::mutable_telemetry() {
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.telemetry)
  return _internal_mutable_telemetry();
}
inline void USVToDroneMessage::set_allocated_telemetry(::comms_ariel::USVTelemetry* telemetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete telemetry_;
  }
  if (telemetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(telemetry);
    if (message_arena != submessage_arena) {
      telemetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_ = telemetry;
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.telemetry)
}

// .comms_ariel.Mission mission = 3;
inline bool USVToDroneMessage::_internal_has_mission() const {
  return this != internal_default_instance() && mission_ != nullptr;
}
inline bool USVToDroneMessage::has_mission() const {
  return _internal_has_mission();
}
inline void USVToDroneMessage::clear_mission() {
  if (GetArena() == nullptr && mission_ != nullptr) {
    delete mission_;
  }
  mission_ = nullptr;
}
inline const ::comms_ariel::Mission& USVToDroneMessage::_internal_mission() const {
  const ::comms_ariel::Mission* p = mission_;
  return p != nullptr ? *p : *reinterpret_cast<const ::comms_ariel::Mission*>(
      &::comms_ariel::_Mission_default_instance_);
}
inline const ::comms_ariel::Mission& USVToDroneMessage::mission() const {
  // @@protoc_insertion_point(field_get:comms_ariel.USVToDroneMessage.mission)
  return _internal_mission();
}
inline void USVToDroneMessage::unsafe_arena_set_allocated_mission(
    ::comms_ariel::Mission* mission) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mission_);
  }
  mission_ = mission;
  if (mission) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comms_ariel.USVToDroneMessage.mission)
}
inline ::comms_ariel::Mission* USVToDroneMessage::release_mission() {
  
  ::comms_ariel::Mission* temp = mission_;
  mission_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::comms_ariel::Mission* USVToDroneMessage::unsafe_arena_release_mission() {
  // @@protoc_insertion_point(field_release:comms_ariel.USVToDroneMessage.mission)
  
  ::comms_ariel::Mission* temp = mission_;
  mission_ = nullptr;
  return temp;
}
inline ::comms_ariel::Mission* USVToDroneMessage::_internal_mutable_mission() {
  
  if (mission_ == nullptr) {
    auto* p = CreateMaybeMessage<::comms_ariel::Mission>(GetArena());
    mission_ = p;
  }
  return mission_;
}
inline ::comms_ariel::Mission* USVToDroneMessage::mutable_mission() {
  // @@protoc_insertion_point(field_mutable:comms_ariel.USVToDroneMessage.mission)
  return _internal_mutable_mission();
}
inline void USVToDroneMessage::set_allocated_mission(::comms_ariel::Mission* mission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mission_;
  }
  if (mission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mission);
    if (message_arena != submessage_arena) {
      mission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mission, submessage_arena);
    }
    
  } else {
    
  }
  mission_ = mission;
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.USVToDroneMessage.mission)
}

// -------------------------------------------------------------------

// DroneToUSVMessage

// .comms_ariel.CommonTelemetry common = 1;
inline bool DroneToUSVMessage::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool DroneToUSVMessage::has_common() const {
  return _internal_has_common();
}
inline void DroneToUSVMessage::clear_common() {
  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::comms_ariel::CommonTelemetry& DroneToUSVMessage::_internal_common() const {
  const ::comms_ariel::CommonTelemetry* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::comms_ariel::CommonTelemetry*>(
      &::comms_ariel::_CommonTelemetry_default_instance_);
}
inline const ::comms_ariel::CommonTelemetry& DroneToUSVMessage::common() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneToUSVMessage.common)
  return _internal_common();
}
inline void DroneToUSVMessage::unsafe_arena_set_allocated_common(
    ::comms_ariel::CommonTelemetry* common) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(common_);
  }
  common_ = common;
  if (common) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comms_ariel.DroneToUSVMessage.common)
}
inline ::comms_ariel::CommonTelemetry* DroneToUSVMessage::release_common() {
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::comms_ariel::CommonTelemetry* DroneToUSVMessage::unsafe_arena_release_common() {
  // @@protoc_insertion_point(field_release:comms_ariel.DroneToUSVMessage.common)
  
  ::comms_ariel::CommonTelemetry* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::comms_ariel::CommonTelemetry* DroneToUSVMessage::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::comms_ariel::CommonTelemetry>(GetArena());
    common_ = p;
  }
  return common_;
}
inline ::comms_ariel::CommonTelemetry* DroneToUSVMessage::mutable_common() {
  // @@protoc_insertion_point(field_mutable:comms_ariel.DroneToUSVMessage.common)
  return _internal_mutable_common();
}
inline void DroneToUSVMessage::set_allocated_common(::comms_ariel::CommonTelemetry* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(common);
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.DroneToUSVMessage.common)
}

// .comms_ariel.DroneTelemetry telemetry = 2;
inline bool DroneToUSVMessage::_internal_has_telemetry() const {
  return this != internal_default_instance() && telemetry_ != nullptr;
}
inline bool DroneToUSVMessage::has_telemetry() const {
  return _internal_has_telemetry();
}
inline void DroneToUSVMessage::clear_telemetry() {
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
}
inline const ::comms_ariel::DroneTelemetry& DroneToUSVMessage::_internal_telemetry() const {
  const ::comms_ariel::DroneTelemetry* p = telemetry_;
  return p != nullptr ? *p : *reinterpret_cast<const ::comms_ariel::DroneTelemetry*>(
      &::comms_ariel::_DroneTelemetry_default_instance_);
}
inline const ::comms_ariel::DroneTelemetry& DroneToUSVMessage::telemetry() const {
  // @@protoc_insertion_point(field_get:comms_ariel.DroneToUSVMessage.telemetry)
  return _internal_telemetry();
}
inline void DroneToUSVMessage::unsafe_arena_set_allocated_telemetry(
    ::comms_ariel::DroneTelemetry* telemetry) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(telemetry_);
  }
  telemetry_ = telemetry;
  if (telemetry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:comms_ariel.DroneToUSVMessage.telemetry)
}
inline ::comms_ariel::DroneTelemetry* DroneToUSVMessage::release_telemetry() {
  
  ::comms_ariel::DroneTelemetry* temp = telemetry_;
  telemetry_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::comms_ariel::DroneTelemetry* DroneToUSVMessage::unsafe_arena_release_telemetry() {
  // @@protoc_insertion_point(field_release:comms_ariel.DroneToUSVMessage.telemetry)
  
  ::comms_ariel::DroneTelemetry* temp = telemetry_;
  telemetry_ = nullptr;
  return temp;
}
inline ::comms_ariel::DroneTelemetry* DroneToUSVMessage::_internal_mutable_telemetry() {
  
  if (telemetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::comms_ariel::DroneTelemetry>(GetArena());
    telemetry_ = p;
  }
  return telemetry_;
}
inline ::comms_ariel::DroneTelemetry* DroneToUSVMessage::mutable_telemetry() {
  // @@protoc_insertion_point(field_mutable:comms_ariel.DroneToUSVMessage.telemetry)
  return _internal_mutable_telemetry();
}
inline void DroneToUSVMessage::set_allocated_telemetry(::comms_ariel::DroneTelemetry* telemetry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete telemetry_;
  }
  if (telemetry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(telemetry);
    if (message_arena != submessage_arena) {
      telemetry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, telemetry, submessage_arena);
    }
    
  } else {
    
  }
  telemetry_ = telemetry;
  // @@protoc_insertion_point(field_set_allocated:comms_ariel.DroneToUSVMessage.telemetry)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace comms_ariel

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::comms_ariel::USVTelemetry_States> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comms_ariel::USVTelemetry_States>() {
  return ::comms_ariel::USVTelemetry_States_descriptor();
}
template <> struct is_proto_enum< ::comms_ariel::DroneTelemetry_States> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::comms_ariel::DroneTelemetry_States>() {
  return ::comms_ariel::DroneTelemetry_States_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_comms_5fariel_2eproto
