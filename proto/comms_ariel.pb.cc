// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comms_ariel.proto

#include "comms_ariel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_comms_5fariel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonTelemetry_comms_5fariel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_comms_5fariel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DroneTelemetry_comms_5fariel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_comms_5fariel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mission_comms_5fariel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_comms_5fariel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USVTelemetry_comms_5fariel_2eproto;
namespace comms_ariel {
class CommonTelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommonTelemetry> _instance;
} _CommonTelemetry_default_instance_;
class USVTelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USVTelemetry> _instance;
} _USVTelemetry_default_instance_;
class DroneTelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DroneTelemetry> _instance;
} _DroneTelemetry_default_instance_;
class MissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mission> _instance;
} _Mission_default_instance_;
class USVToDroneMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<USVToDroneMessage> _instance;
} _USVToDroneMessage_default_instance_;
class DroneToUSVMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DroneToUSVMessage> _instance;
} _DroneToUSVMessage_default_instance_;
}  // namespace comms_ariel
static void InitDefaultsscc_info_CommonTelemetry_comms_5fariel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_CommonTelemetry_default_instance_;
    new (ptr) ::comms_ariel::CommonTelemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::CommonTelemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommonTelemetry_comms_5fariel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommonTelemetry_comms_5fariel_2eproto}, {}};

static void InitDefaultsscc_info_DroneTelemetry_comms_5fariel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_DroneTelemetry_default_instance_;
    new (ptr) ::comms_ariel::DroneTelemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::DroneTelemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DroneTelemetry_comms_5fariel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DroneTelemetry_comms_5fariel_2eproto}, {}};

static void InitDefaultsscc_info_DroneToUSVMessage_comms_5fariel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_DroneToUSVMessage_default_instance_;
    new (ptr) ::comms_ariel::DroneToUSVMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::DroneToUSVMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DroneToUSVMessage_comms_5fariel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DroneToUSVMessage_comms_5fariel_2eproto}, {
      &scc_info_CommonTelemetry_comms_5fariel_2eproto.base,
      &scc_info_DroneTelemetry_comms_5fariel_2eproto.base,}};

static void InitDefaultsscc_info_Mission_comms_5fariel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_Mission_default_instance_;
    new (ptr) ::comms_ariel::Mission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::Mission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mission_comms_5fariel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mission_comms_5fariel_2eproto}, {}};

static void InitDefaultsscc_info_USVTelemetry_comms_5fariel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_USVTelemetry_default_instance_;
    new (ptr) ::comms_ariel::USVTelemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::USVTelemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_USVTelemetry_comms_5fariel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_USVTelemetry_comms_5fariel_2eproto}, {}};

static void InitDefaultsscc_info_USVToDroneMessage_comms_5fariel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::comms_ariel::_USVToDroneMessage_default_instance_;
    new (ptr) ::comms_ariel::USVToDroneMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::comms_ariel::USVToDroneMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_USVToDroneMessage_comms_5fariel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_USVToDroneMessage_comms_5fariel_2eproto}, {
      &scc_info_CommonTelemetry_comms_5fariel_2eproto.base,
      &scc_info_USVTelemetry_comms_5fariel_2eproto.base,
      &scc_info_Mission_comms_5fariel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_comms_5fariel_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_comms_5fariel_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_comms_5fariel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_comms_5fariel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::CommonTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::CommonTelemetry, time_us_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::CommonTelemetry, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVTelemetry, latitude_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVTelemetry, longitude_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVTelemetry, orientation_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVTelemetry, velocity_n_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVTelemetry, velocity_w_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVTelemetry, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneTelemetry, loaded_mission_id_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneTelemetry, latitude_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneTelemetry, longitude_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneTelemetry, altitude_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneTelemetry, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::Mission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::Mission, mission_id_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::Mission, waypoints_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::Mission, usv_reference_time_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::Mission, usv_waypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, common_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, telemetry_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::USVToDroneMessage, mission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneToUSVMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneToUSVMessage, common_),
  PROTOBUF_FIELD_OFFSET(::comms_ariel::DroneToUSVMessage, telemetry_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::comms_ariel::CommonTelemetry)},
  { 7, -1, sizeof(::comms_ariel::USVTelemetry)},
  { 18, -1, sizeof(::comms_ariel::DroneTelemetry)},
  { 28, -1, sizeof(::comms_ariel::Mission)},
  { 37, -1, sizeof(::comms_ariel::USVToDroneMessage)},
  { 45, -1, sizeof(::comms_ariel::DroneToUSVMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::comms_ariel::_CommonTelemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::comms_ariel::_USVTelemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::comms_ariel::_DroneTelemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::comms_ariel::_Mission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::comms_ariel::_USVToDroneMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::comms_ariel::_DroneToUSVMessage_default_instance_),
};

const char descriptor_table_protodef_comms_5fariel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021comms_ariel.proto\022\013comms_ariel\".\n\017Comm"
  "onTelemetry\022\017\n\007time_us\030\001 \001(\004\022\n\n\002id\030\002 \001(\r"
  "\"\330\001\n\014USVTelemetry\022\020\n\010latitude\030\002 \001(\001\022\021\n\tl"
  "ongitude\030\003 \001(\001\022\023\n\013orientation\030\004 \003(\001\022\022\n\nv"
  "elocity_n\030\005 \001(\002\022\022\n\nvelocity_w\030\006 \001(\002\022/\n\005s"
  "tate\030\010 \001(\0162 .comms_ariel.USVTelemetry.St"
  "ates\"5\n\006States\022\013\n\007TRANSIT\020\000\022\016\n\nTAKEOFF_O"
  "K\020\001\022\016\n\nLANDING_OK\020\002\"\264\001\n\016DroneTelemetry\022\031"
  "\n\021loaded_mission_id\030\001 \001(\004\022\020\n\010latitude\030\002 "
  "\001(\001\022\021\n\tlongitude\030\003 \001(\001\022\020\n\010altitude\030\004 \001(\002"
  "\0221\n\005state\030\010 \001(\0162\".comms_ariel.DroneTelem"
  "etry.States\"\035\n\006States\022\023\n\017WAITING_LANDING"
  "\020\000\"c\n\007Mission\022\022\n\nmission_id\030\001 \001(\004\022\021\n\tway"
  "points\030\002 \003(\001\022\032\n\022usv_reference_time\030\003 \001(\004"
  "\022\025\n\rusv_waypoints\030\004 \003(\001\"\226\001\n\021USVToDroneMe"
  "ssage\022,\n\006common\030\001 \001(\0132\034.comms_ariel.Comm"
  "onTelemetry\022,\n\ttelemetry\030\002 \001(\0132\031.comms_a"
  "riel.USVTelemetry\022%\n\007mission\030\003 \001(\0132\024.com"
  "ms_ariel.Mission\"q\n\021DroneToUSVMessage\022,\n"
  "\006common\030\001 \001(\0132\034.comms_ariel.CommonTeleme"
  "try\022.\n\ttelemetry\030\002 \001(\0132\033.comms_ariel.Dro"
  "neTelemetryb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_comms_5fariel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_comms_5fariel_2eproto_sccs[6] = {
  &scc_info_CommonTelemetry_comms_5fariel_2eproto.base,
  &scc_info_DroneTelemetry_comms_5fariel_2eproto.base,
  &scc_info_DroneToUSVMessage_comms_5fariel_2eproto.base,
  &scc_info_Mission_comms_5fariel_2eproto.base,
  &scc_info_USVTelemetry_comms_5fariel_2eproto.base,
  &scc_info_USVToDroneMessage_comms_5fariel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_comms_5fariel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_comms_5fariel_2eproto = {
  false, false, descriptor_table_protodef_comms_5fariel_2eproto, "comms_ariel.proto", 859,
  &descriptor_table_comms_5fariel_2eproto_once, descriptor_table_comms_5fariel_2eproto_sccs, descriptor_table_comms_5fariel_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_comms_5fariel_2eproto::offsets,
  file_level_metadata_comms_5fariel_2eproto, 6, file_level_enum_descriptors_comms_5fariel_2eproto, file_level_service_descriptors_comms_5fariel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_comms_5fariel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_comms_5fariel_2eproto)), true);
namespace comms_ariel {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* USVTelemetry_States_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_comms_5fariel_2eproto);
  return file_level_enum_descriptors_comms_5fariel_2eproto[0];
}
bool USVTelemetry_States_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr USVTelemetry_States USVTelemetry::TRANSIT;
constexpr USVTelemetry_States USVTelemetry::TAKEOFF_OK;
constexpr USVTelemetry_States USVTelemetry::LANDING_OK;
constexpr USVTelemetry_States USVTelemetry::States_MIN;
constexpr USVTelemetry_States USVTelemetry::States_MAX;
constexpr int USVTelemetry::States_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DroneTelemetry_States_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_comms_5fariel_2eproto);
  return file_level_enum_descriptors_comms_5fariel_2eproto[1];
}
bool DroneTelemetry_States_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DroneTelemetry_States DroneTelemetry::WAITING_LANDING;
constexpr DroneTelemetry_States DroneTelemetry::States_MIN;
constexpr DroneTelemetry_States DroneTelemetry::States_MAX;
constexpr int DroneTelemetry::States_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CommonTelemetry::InitAsDefaultInstance() {
}
class CommonTelemetry::_Internal {
 public:
};

CommonTelemetry::CommonTelemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:comms_ariel.CommonTelemetry)
}
CommonTelemetry::CommonTelemetry(const CommonTelemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_us_, &from.time_us_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&time_us_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.CommonTelemetry)
}

void CommonTelemetry::SharedCtor() {
  ::memset(&time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_us_)) + sizeof(id_));
}

CommonTelemetry::~CommonTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.CommonTelemetry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommonTelemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommonTelemetry::ArenaDtor(void* object) {
  CommonTelemetry* _this = reinterpret_cast< CommonTelemetry* >(object);
  (void)_this;
}
void CommonTelemetry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommonTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommonTelemetry& CommonTelemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommonTelemetry_comms_5fariel_2eproto.base);
  return *internal_default_instance();
}


void CommonTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.CommonTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_us_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&time_us_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonTelemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time_us = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_us_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommonTelemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.CommonTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time_us(), target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.CommonTelemetry)
  return target;
}

size_t CommonTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.CommonTelemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 time_us = 1;
  if (this->time_us() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time_us());
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonTelemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.CommonTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonTelemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommonTelemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.CommonTelemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.CommonTelemetry)
    MergeFrom(*source);
  }
}

void CommonTelemetry::MergeFrom(const CommonTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.CommonTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time_us() != 0) {
    _internal_set_time_us(from._internal_time_us());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void CommonTelemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.CommonTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonTelemetry::CopyFrom(const CommonTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.CommonTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonTelemetry::IsInitialized() const {
  return true;
}

void CommonTelemetry::InternalSwap(CommonTelemetry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonTelemetry, id_)
      + sizeof(CommonTelemetry::id_)
      - PROTOBUF_FIELD_OFFSET(CommonTelemetry, time_us_)>(
          reinterpret_cast<char*>(&time_us_),
          reinterpret_cast<char*>(&other->time_us_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonTelemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USVTelemetry::InitAsDefaultInstance() {
}
class USVTelemetry::_Internal {
 public:
};

USVTelemetry::USVTelemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orientation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:comms_ariel.USVTelemetry)
}
USVTelemetry::USVTelemetry(const USVTelemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orientation_(from.orientation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.USVTelemetry)
}

void USVTelemetry::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(state_));
}

USVTelemetry::~USVTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.USVTelemetry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USVTelemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void USVTelemetry::ArenaDtor(void* object) {
  USVTelemetry* _this = reinterpret_cast< USVTelemetry* >(object);
  (void)_this;
}
void USVTelemetry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USVTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USVTelemetry& USVTelemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USVTelemetry_comms_5fariel_2eproto.base);
  return *internal_default_instance();
}


void USVTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.USVTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orientation_.Clear();
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USVTelemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_orientation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_orientation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float velocity_n = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          velocity_n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_w = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          velocity_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .comms_ariel.USVTelemetry.States state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::comms_ariel::USVTelemetry_States>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USVTelemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.USVTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // repeated double orientation = 4;
  if (this->_internal_orientation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_orientation(), target);
  }

  // float velocity_n = 5;
  if (!(this->velocity_n() <= 0 && this->velocity_n() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_velocity_n(), target);
  }

  // float velocity_w = 6;
  if (!(this->velocity_w() <= 0 && this->velocity_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_velocity_w(), target);
  }

  // .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.USVTelemetry)
  return target;
}

size_t USVTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.USVTelemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double orientation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_orientation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _orientation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float velocity_n = 5;
  if (!(this->velocity_n() <= 0 && this->velocity_n() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_w = 6;
  if (!(this->velocity_w() <= 0 && this->velocity_w() >= 0)) {
    total_size += 1 + 4;
  }

  // .comms_ariel.USVTelemetry.States state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USVTelemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.USVTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const USVTelemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USVTelemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.USVTelemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.USVTelemetry)
    MergeFrom(*source);
  }
}

void USVTelemetry::MergeFrom(const USVTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.USVTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orientation_.MergeFrom(from.orientation_);
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.velocity_n() <= 0 && from.velocity_n() >= 0)) {
    _internal_set_velocity_n(from._internal_velocity_n());
  }
  if (!(from.velocity_w() <= 0 && from.velocity_w() >= 0)) {
    _internal_set_velocity_w(from._internal_velocity_w());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void USVTelemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.USVTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USVTelemetry::CopyFrom(const USVTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.USVTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USVTelemetry::IsInitialized() const {
  return true;
}

void USVTelemetry::InternalSwap(USVTelemetry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orientation_.InternalSwap(&other->orientation_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USVTelemetry, state_)
      + sizeof(USVTelemetry::state_)
      - PROTOBUF_FIELD_OFFSET(USVTelemetry, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USVTelemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DroneTelemetry::InitAsDefaultInstance() {
}
class DroneTelemetry::_Internal {
 public:
};

DroneTelemetry::DroneTelemetry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:comms_ariel.DroneTelemetry)
}
DroneTelemetry::DroneTelemetry(const DroneTelemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&loaded_mission_id_, &from.loaded_mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&loaded_mission_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.DroneTelemetry)
}

void DroneTelemetry::SharedCtor() {
  ::memset(&loaded_mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&loaded_mission_id_)) + sizeof(state_));
}

DroneTelemetry::~DroneTelemetry() {
  // @@protoc_insertion_point(destructor:comms_ariel.DroneTelemetry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DroneTelemetry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DroneTelemetry::ArenaDtor(void* object) {
  DroneTelemetry* _this = reinterpret_cast< DroneTelemetry* >(object);
  (void)_this;
}
void DroneTelemetry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DroneTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DroneTelemetry& DroneTelemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DroneTelemetry_comms_5fariel_2eproto.base);
  return *internal_default_instance();
}


void DroneTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.DroneTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&loaded_mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&loaded_mission_id_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DroneTelemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 loaded_mission_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          loaded_mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float altitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .comms_ariel.DroneTelemetry.States state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::comms_ariel::DroneTelemetry_States>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DroneTelemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.DroneTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_loaded_mission_id(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // float altitude = 4;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_altitude(), target);
  }

  // .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.DroneTelemetry)
  return target;
}

size_t DroneTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.DroneTelemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 loaded_mission_id = 1;
  if (this->loaded_mission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_loaded_mission_id());
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // float altitude = 4;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 4;
  }

  // .comms_ariel.DroneTelemetry.States state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DroneTelemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.DroneTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneTelemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DroneTelemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.DroneTelemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.DroneTelemetry)
    MergeFrom(*source);
  }
}

void DroneTelemetry::MergeFrom(const DroneTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.DroneTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loaded_mission_id() != 0) {
    _internal_set_loaded_mission_id(from._internal_loaded_mission_id());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    _internal_set_altitude(from._internal_altitude());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void DroneTelemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.DroneTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneTelemetry::CopyFrom(const DroneTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.DroneTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneTelemetry::IsInitialized() const {
  return true;
}

void DroneTelemetry::InternalSwap(DroneTelemetry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DroneTelemetry, state_)
      + sizeof(DroneTelemetry::state_)
      - PROTOBUF_FIELD_OFFSET(DroneTelemetry, loaded_mission_id_)>(
          reinterpret_cast<char*>(&loaded_mission_id_),
          reinterpret_cast<char*>(&other->loaded_mission_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DroneTelemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mission::InitAsDefaultInstance() {
}
class Mission::_Internal {
 public:
};

Mission::Mission(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waypoints_(arena),
  usv_waypoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:comms_ariel.Mission)
}
Mission::Mission(const Mission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waypoints_(from.waypoints_),
      usv_waypoints_(from.usv_waypoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mission_id_, &from.mission_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&usv_reference_time_) -
    reinterpret_cast<char*>(&mission_id_)) + sizeof(usv_reference_time_));
  // @@protoc_insertion_point(copy_constructor:comms_ariel.Mission)
}

void Mission::SharedCtor() {
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usv_reference_time_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(usv_reference_time_));
}

Mission::~Mission() {
  // @@protoc_insertion_point(destructor:comms_ariel.Mission)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mission::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mission::ArenaDtor(void* object) {
  Mission* _this = reinterpret_cast< Mission* >(object);
  (void)_this;
}
void Mission::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mission& Mission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mission_comms_5fariel_2eproto.base);
  return *internal_default_instance();
}


void Mission::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.Mission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  usv_waypoints_.Clear();
  ::memset(&mission_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usv_reference_time_) -
      reinterpret_cast<char*>(&mission_id_)) + sizeof(usv_reference_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 mission_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          mission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double waypoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_waypoints(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_waypoints(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 usv_reference_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          usv_reference_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double usv_waypoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_usv_waypoints(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_usv_waypoints(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.Mission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_mission_id(), target);
  }

  // repeated double waypoints = 2;
  if (this->_internal_waypoints_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_waypoints(), target);
  }

  // uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_usv_reference_time(), target);
  }

  // repeated double usv_waypoints = 4;
  if (this->_internal_usv_waypoints_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_usv_waypoints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.Mission)
  return target;
}

size_t Mission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.Mission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double waypoints = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_waypoints_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _waypoints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double usv_waypoints = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_usv_waypoints_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _usv_waypoints_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 mission_id = 1;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mission_id());
  }

  // uint64 usv_reference_time = 3;
  if (this->usv_reference_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_usv_reference_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  const Mission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.Mission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.Mission)
    MergeFrom(*source);
  }
}

void Mission::MergeFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.Mission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  usv_waypoints_.MergeFrom(from.usv_waypoints_);
  if (from.mission_id() != 0) {
    _internal_set_mission_id(from._internal_mission_id());
  }
  if (from.usv_reference_time() != 0) {
    _internal_set_usv_reference_time(from._internal_usv_reference_time());
  }
}

void Mission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mission::CopyFrom(const Mission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.Mission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mission::IsInitialized() const {
  return true;
}

void Mission::InternalSwap(Mission* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waypoints_.InternalSwap(&other->waypoints_);
  usv_waypoints_.InternalSwap(&other->usv_waypoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mission, usv_reference_time_)
      + sizeof(Mission::usv_reference_time_)
      - PROTOBUF_FIELD_OFFSET(Mission, mission_id_)>(
          reinterpret_cast<char*>(&mission_id_),
          reinterpret_cast<char*>(&other->mission_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void USVToDroneMessage::InitAsDefaultInstance() {
  ::comms_ariel::_USVToDroneMessage_default_instance_._instance.get_mutable()->common_ = const_cast< ::comms_ariel::CommonTelemetry*>(
      ::comms_ariel::CommonTelemetry::internal_default_instance());
  ::comms_ariel::_USVToDroneMessage_default_instance_._instance.get_mutable()->telemetry_ = const_cast< ::comms_ariel::USVTelemetry*>(
      ::comms_ariel::USVTelemetry::internal_default_instance());
  ::comms_ariel::_USVToDroneMessage_default_instance_._instance.get_mutable()->mission_ = const_cast< ::comms_ariel::Mission*>(
      ::comms_ariel::Mission::internal_default_instance());
}
class USVToDroneMessage::_Internal {
 public:
  static const ::comms_ariel::CommonTelemetry& common(const USVToDroneMessage* msg);
  static const ::comms_ariel::USVTelemetry& telemetry(const USVToDroneMessage* msg);
  static const ::comms_ariel::Mission& mission(const USVToDroneMessage* msg);
};

const ::comms_ariel::CommonTelemetry&
USVToDroneMessage::_Internal::common(const USVToDroneMessage* msg) {
  return *msg->common_;
}
const ::comms_ariel::USVTelemetry&
USVToDroneMessage::_Internal::telemetry(const USVToDroneMessage* msg) {
  return *msg->telemetry_;
}
const ::comms_ariel::Mission&
USVToDroneMessage::_Internal::mission(const USVToDroneMessage* msg) {
  return *msg->mission_;
}
USVToDroneMessage::USVToDroneMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:comms_ariel.USVToDroneMessage)
}
USVToDroneMessage::USVToDroneMessage(const USVToDroneMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::comms_ariel::CommonTelemetry(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::comms_ariel::USVTelemetry(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  if (from._internal_has_mission()) {
    mission_ = new ::comms_ariel::Mission(*from.mission_);
  } else {
    mission_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:comms_ariel.USVToDroneMessage)
}

void USVToDroneMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_USVToDroneMessage_comms_5fariel_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_) -
      reinterpret_cast<char*>(&common_)) + sizeof(mission_));
}

USVToDroneMessage::~USVToDroneMessage() {
  // @@protoc_insertion_point(destructor:comms_ariel.USVToDroneMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void USVToDroneMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete telemetry_;
  if (this != internal_default_instance()) delete mission_;
}

void USVToDroneMessage::ArenaDtor(void* object) {
  USVToDroneMessage* _this = reinterpret_cast< USVToDroneMessage* >(object);
  (void)_this;
}
void USVToDroneMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void USVToDroneMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const USVToDroneMessage& USVToDroneMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_USVToDroneMessage_comms_5fariel_2eproto.base);
  return *internal_default_instance();
}


void USVToDroneMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.USVToDroneMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  if (GetArena() == nullptr && mission_ != nullptr) {
    delete mission_;
  }
  mission_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* USVToDroneMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .comms_ariel.CommonTelemetry common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .comms_ariel.USVTelemetry telemetry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .comms_ariel.Mission mission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* USVToDroneMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.USVToDroneMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::telemetry(this), target, stream);
  }

  // .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mission(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.USVToDroneMessage)
  return target;
}

size_t USVToDroneMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.USVToDroneMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .comms_ariel.USVTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  // .comms_ariel.Mission mission = 3;
  if (this->has_mission()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mission_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void USVToDroneMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.USVToDroneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const USVToDroneMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<USVToDroneMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.USVToDroneMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.USVToDroneMessage)
    MergeFrom(*source);
  }
}

void USVToDroneMessage::MergeFrom(const USVToDroneMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.USVToDroneMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::comms_ariel::CommonTelemetry::MergeFrom(from._internal_common());
  }
  if (from.has_telemetry()) {
    _internal_mutable_telemetry()->::comms_ariel::USVTelemetry::MergeFrom(from._internal_telemetry());
  }
  if (from.has_mission()) {
    _internal_mutable_mission()->::comms_ariel::Mission::MergeFrom(from._internal_mission());
  }
}

void USVToDroneMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.USVToDroneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void USVToDroneMessage::CopyFrom(const USVToDroneMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.USVToDroneMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool USVToDroneMessage::IsInitialized() const {
  return true;
}

void USVToDroneMessage::InternalSwap(USVToDroneMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(USVToDroneMessage, mission_)
      + sizeof(USVToDroneMessage::mission_)
      - PROTOBUF_FIELD_OFFSET(USVToDroneMessage, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata USVToDroneMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DroneToUSVMessage::InitAsDefaultInstance() {
  ::comms_ariel::_DroneToUSVMessage_default_instance_._instance.get_mutable()->common_ = const_cast< ::comms_ariel::CommonTelemetry*>(
      ::comms_ariel::CommonTelemetry::internal_default_instance());
  ::comms_ariel::_DroneToUSVMessage_default_instance_._instance.get_mutable()->telemetry_ = const_cast< ::comms_ariel::DroneTelemetry*>(
      ::comms_ariel::DroneTelemetry::internal_default_instance());
}
class DroneToUSVMessage::_Internal {
 public:
  static const ::comms_ariel::CommonTelemetry& common(const DroneToUSVMessage* msg);
  static const ::comms_ariel::DroneTelemetry& telemetry(const DroneToUSVMessage* msg);
};

const ::comms_ariel::CommonTelemetry&
DroneToUSVMessage::_Internal::common(const DroneToUSVMessage* msg) {
  return *msg->common_;
}
const ::comms_ariel::DroneTelemetry&
DroneToUSVMessage::_Internal::telemetry(const DroneToUSVMessage* msg) {
  return *msg->telemetry_;
}
DroneToUSVMessage::DroneToUSVMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:comms_ariel.DroneToUSVMessage)
}
DroneToUSVMessage::DroneToUSVMessage(const DroneToUSVMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::comms_ariel::CommonTelemetry(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::comms_ariel::DroneTelemetry(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:comms_ariel.DroneToUSVMessage)
}

void DroneToUSVMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DroneToUSVMessage_comms_5fariel_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&telemetry_) -
      reinterpret_cast<char*>(&common_)) + sizeof(telemetry_));
}

DroneToUSVMessage::~DroneToUSVMessage() {
  // @@protoc_insertion_point(destructor:comms_ariel.DroneToUSVMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DroneToUSVMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete telemetry_;
}

void DroneToUSVMessage::ArenaDtor(void* object) {
  DroneToUSVMessage* _this = reinterpret_cast< DroneToUSVMessage* >(object);
  (void)_this;
}
void DroneToUSVMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DroneToUSVMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DroneToUSVMessage& DroneToUSVMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DroneToUSVMessage_comms_5fariel_2eproto.base);
  return *internal_default_instance();
}


void DroneToUSVMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:comms_ariel.DroneToUSVMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArena() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DroneToUSVMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .comms_ariel.CommonTelemetry common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .comms_ariel.DroneTelemetry telemetry = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DroneToUSVMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:comms_ariel.DroneToUSVMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::telemetry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:comms_ariel.DroneToUSVMessage)
  return target;
}

size_t DroneToUSVMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:comms_ariel.DroneToUSVMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .comms_ariel.CommonTelemetry common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .comms_ariel.DroneTelemetry telemetry = 2;
  if (this->has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DroneToUSVMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:comms_ariel.DroneToUSVMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DroneToUSVMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DroneToUSVMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:comms_ariel.DroneToUSVMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:comms_ariel.DroneToUSVMessage)
    MergeFrom(*source);
  }
}

void DroneToUSVMessage::MergeFrom(const DroneToUSVMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:comms_ariel.DroneToUSVMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::comms_ariel::CommonTelemetry::MergeFrom(from._internal_common());
  }
  if (from.has_telemetry()) {
    _internal_mutable_telemetry()->::comms_ariel::DroneTelemetry::MergeFrom(from._internal_telemetry());
  }
}

void DroneToUSVMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:comms_ariel.DroneToUSVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DroneToUSVMessage::CopyFrom(const DroneToUSVMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:comms_ariel.DroneToUSVMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DroneToUSVMessage::IsInitialized() const {
  return true;
}

void DroneToUSVMessage::InternalSwap(DroneToUSVMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DroneToUSVMessage, telemetry_)
      + sizeof(DroneToUSVMessage::telemetry_)
      - PROTOBUF_FIELD_OFFSET(DroneToUSVMessage, common_)>(
          reinterpret_cast<char*>(&common_),
          reinterpret_cast<char*>(&other->common_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DroneToUSVMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace comms_ariel
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::comms_ariel::CommonTelemetry* Arena::CreateMaybeMessage< ::comms_ariel::CommonTelemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comms_ariel::CommonTelemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::comms_ariel::USVTelemetry* Arena::CreateMaybeMessage< ::comms_ariel::USVTelemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comms_ariel::USVTelemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::comms_ariel::DroneTelemetry* Arena::CreateMaybeMessage< ::comms_ariel::DroneTelemetry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comms_ariel::DroneTelemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::comms_ariel::Mission* Arena::CreateMaybeMessage< ::comms_ariel::Mission >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comms_ariel::Mission >(arena);
}
template<> PROTOBUF_NOINLINE ::comms_ariel::USVToDroneMessage* Arena::CreateMaybeMessage< ::comms_ariel::USVToDroneMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comms_ariel::USVToDroneMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::comms_ariel::DroneToUSVMessage* Arena::CreateMaybeMessage< ::comms_ariel::DroneToUSVMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::comms_ariel::DroneToUSVMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
